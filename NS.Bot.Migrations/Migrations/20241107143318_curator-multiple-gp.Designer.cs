// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NS.Bot.BuisnessLogic;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NS.Bot.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241107143318_curator-multiple-gp")]
    partial class curatormultiplegp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NS.Bot.Shared.Entities.Group.GroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CuratorId")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupType")
                        .HasColumnType("integer");

                    b.Property<long?>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Leader")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupType")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Guild.GuildEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Guild.GuildMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GuildId");

                    b.HasIndex("MemberId");

                    b.ToTable("GuildMembers");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Guild.GuildRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AdminListMessageChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("AdminListMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChiefAdminDeputyRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChiefAdminRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChiefEventmasterRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("CuratorRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("EventmasterRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("HelperRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("JuniorCuratorRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("JuniorEventmasterRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("PlayerRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("RPAdminRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("RelatedGuildId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SeniorCuratorRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RelatedGuildId");

                    b.ToTable("GuildRoles");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.MemberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("SteamId")
                        .HasColumnType("text");

                    b.Property<long>("TotalWarnCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Radio.RadioEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("VoiceChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("VoiceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Radios");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Radio.RadioSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CommandChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<decimal>("RadiosCategoryId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("RelatedGuildId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RelatedGuildId");

                    b.ToTable("RadioSettings");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.TicketBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<long>("ResponsibleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("BaseTickets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TicketBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Warn.WarnEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("boolean");

                    b.Property<long>("IssuedToId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<long>("ResponsibleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WarnType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IssuedToId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Warns");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Warn.WarnSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BanRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("FirstRebukeRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("FirstWarnRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ReadOnlyRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long?>("RelatedGuildId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SecondRebukeRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("SecondWarnRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ThirdRebukeRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ThirdWarnRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("WarnChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RelatedGuildId");

                    b.ToTable("WarnSettings");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Ticket.TicketNick", b =>
                {
                    b.HasBaseType("NS.Bot.Shared.Entities.TicketBase");

                    b.Property<string>("NewNick")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("TicketNick");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Group.GroupEntity", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.Guild.GuildEntity", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Guild.GuildMember", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.Group.GroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("NS.Bot.Shared.Entities.Guild.GuildEntity", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");

                    b.HasOne("NS.Bot.Shared.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Guild");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Guild.GuildRoles", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.Guild.GuildEntity", "RelatedGuild")
                        .WithMany()
                        .HasForeignKey("RelatedGuildId");

                    b.Navigation("RelatedGuild");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Radio.RadioEntity", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.Guild.GuildEntity", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Radio.RadioSettings", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.Guild.GuildEntity", "RelatedGuild")
                        .WithMany()
                        .HasForeignKey("RelatedGuildId");

                    b.Navigation("RelatedGuild");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.TicketBase", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.Guild.GuildEntity", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Warn.WarnEntity", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.MemberEntity", "IssuedTo")
                        .WithMany("Warns")
                        .HasForeignKey("IssuedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NS.Bot.Shared.Entities.MemberEntity", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssuedTo");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.Warn.WarnSettings", b =>
                {
                    b.HasOne("NS.Bot.Shared.Entities.Guild.GuildEntity", "RelatedGuild")
                        .WithMany()
                        .HasForeignKey("RelatedGuildId");

                    b.Navigation("RelatedGuild");
                });

            modelBuilder.Entity("NS.Bot.Shared.Entities.MemberEntity", b =>
                {
                    b.Navigation("Warns");
                });
#pragma warning restore 612, 618
        }
    }
}
